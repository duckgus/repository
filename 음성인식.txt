컴파일 기법  이진파일로 번역 후 컴퓨터에서 실행
인터프리트 기법 인터프리터에 프로그램 실행
하이브리드 위 둘다 사용

객체지향언어
자바는 완전한 객체지향 언어
객체지향의 특성인 클래스, 상속, 캡슐화, 다형성 등의 개념이 잘 적용된 언어
실 세계와 동일한 사고방식의 프로그램

운영 체제에 독립적 : 소프트웨어와 운영체제

자바란?
자바는 객체지향 언어이고 실세계와 같은 방법으로 작동
어디서든 실행될 수 있는 환경을 갖추고 있다.

오류으 ㅣ종류
구문 오류 : 프로그램 구조를 잘못 사용할 때 발생
실행 시간오류 : 실행 시간에 발생하는 오류
논리 오류 : 의도와 다른 결과를 나타내는 오류

식별자
사용자가 정의하는 클래스나 메소드 등을 구분할 수 있는 이름

사용 원칙
- 문자, 숫자, 특수문자(_, $)로 구성될 수 있다.
- 시작은 문자나 특문
- 예약어 x
- true, false, null 안됌
- 길이  제한 x
- 같은 문자의 대소문자는 서로 다른 식별자

변수명의 규칙
- 첫글자 영문자 특문(_,$)
- 숫자 포함 가능
- 공백 포함 x
- 대소문자 구분
- 예약어 x

자료형 : 변수가 가질 수 있는 값의 형태
기본 자료형 : 값을 가짐
참조 자료형 : 주소를 가짐

실수형
부호와 지수,가수
저장크기에 따라 float, double
디폴트는 더블

형변환
특정 자료형의 값을 다른 형태의 변수에 배정할 때 발생
확대형 변환과 축소형

산술 연산자
단항 연산자는 피연산자로 변수만 사용 (사칙연산 같은거)

관계 연산자
두개의 피연산자 값들을 비교 bool값을 반환
선택문, 반목문의 조건식에 사용
자료형은 큰 쪽으로 자동형 변환

논리 연산자
두개의 피연산자 값을 평가 후 true or false ( 다른값안됌)

절차지향 언어
기본 단위는 절차 or 함수로 정의
문제점 : 문제를 기능으로만 전환해야하는 문제점, 상세한 구조까지도 완벽히 이해해야 함
문제의 변환을 위해서 복사와 수정이 필요
변활 될 때마다 복사와 수정

객체지향 언어
기본단위 -> 객체, 객체는 "속성+기능"
장점
쉽고 자연스럽게 모델링 가능
생산성 향상, 모듈의 재사용
요소
속성 : 객체가 가지는 데이터
메소드 : 객체가 할 수 있는 행위

클래스
여러 개의 객체를 생성하기 위해 사용하는 형판
변수, 생성자, 메소드로 구성
멤버 변수 : 객체의 속성을 나타내는 변수
생성자 : 클래스에서 생성될 때 수행되는 메소드
메소드 : 객체의 기능

기존클래스 복사 후 기능 추가, 상속하면 됨

상속의 이점
소프트웨어 설계를 간단하게 할 수 있다
코드가 간결해진다, 코드의 재사용성을 높인다.

캠슐화의 장점
객체에 포함된 정보의 손상과 오용을 막을 수 있다.
데이터가 바뀌어도 다른 객체에 영향을 주지않아 독립성이 유지
객체의 이식성이 좋다.

추상화 : 실세계의 문제를 객체로 변환할 때 적용할 수 있는 개념

다형성 : 다양한 변신을 의미하는 개념, 상속과 추상 클래스 이용

멤버 변수
클래스내에 메소드 밖에 선언된 변수 객체변수, 클래스 변수, 종단 변수로 구분
생성자, 메소드의 변수
생성자나 메소드에는 자체적으로 선언하여 사용하는 지역 변수, 호줄 시 지정되는 매개 변수

객체변수 묵시적 값이 자동설정, 메소드 지역 변수 -> 초기화x(오류)

생성자
클래스로부터 객체가 생성될 때 초기화 과정을 수행하는 메소드
생성자의 이름은 클래스 이름과 동일

오버로딩
오버로딩되는 생성자는 매개 변수의 개수와 타입이 반드시 달라야 한다.

예약어 this 생성자 내에서 단독으로 사용
다른 생성자를 호출한다.

선언 시 사용되는 접근 한정자는 퍼블릭, 프라이빗, 프로텍티드 3개 

클래스 메소드
static를 붙여 클래스 메소드로 선언
객체를 생성하지 않아도 사용 가능한 함수 같은 메소드

final 서브 클래스에서 오버라이딩 할 수 없음
abstract 추상메소드, 하위 클래스에서 오버라이딩 가능
synchronized 스레드 동기화할 수 있는 기법을 제공하기 위해 사용되는 메소드

메소드는 상호 호출될 수 있다.
메소드 선언부에서 반환값의 자료형이 지정되어야 한다.

상속의 효과
클래스 검색, 확장, 변경이 쉬움
정보의 재사용

다중 상속x
사용할 수 있는 대상 : 클래스 멤버변수, 메소드

오버라이딩
상속 관계에 있는 클래스들 간에 같은 이름의 메소드를 정의하는 경우
매개변수의 타입과 개수까지도 같아야함
public -> protected -> 한정자 사용안 함
private는 상속x

메시지
객체이름
메소드이름
매개변수

super
하위 클래스에 의해 가려진 상위 클래스의 멤버 변수나 메소드에 접근할 때 사용
상위 클래스의 명시적 생성자를 호출하기 위해 사용

final - 모두 변하는 것을 방지하기 위해 사용

상속된 관계에서 객체의 형 변환을 허용
상위 - 하위(가능) 반대x

instanceof 연산자 - 특정 클래스로부터 생성된 객체인지 판별 true or false값을 반환

다형성
메소드 오버라이딩을 통해 구현될 수 있다.

추상 클래스와 추상 메소드의 오버라이딩을 이요하면 더욱 효율적인 다형성을 구현

인터페이스는 상수와 메소드 선언들만을 가진 클래스로 정의
사용하기 위해서 implements 사용, 다형성을 구현하는데 사용될 수 있다.

클래스 멤버



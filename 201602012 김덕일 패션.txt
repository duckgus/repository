from keras.datasets import mnist
from keras.utils import np_utils
from keras.models import Sequential
from keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D
from keras.callbacks import ModelCheckpoint, EarlyStopping
#from google.colab import files
#upload = files.upload()

import matplotlib.pyplot as plt
import numpy as np
import os
import tensorflow as tf
import pandas as pd

#Seed
seed = 0
np.random.seed(seed)
tf.random.set_seed(3)

#data
df = pd.read_csv("fashion-mnist_test.csv", header=None)

dataset = df.values
X_test = dataset[:,1:785]
Y_test = dataset[:,0]

df = pd.read_csv("fashion-mnist_train.csv", header=None)
dataset = df.values
X_train = dataset[:,1:785]
Y_train = dataset[:,0]

X_train = X_train.reshape(X_train.shape[0], 28, 28, 1).astype('float32') / 255
X_test = X_test.reshape(X_test.shape[0], 28, 28, 1).astype('float32') / 255
Y_train = np_utils.to_categorical(Y_train)
Y_test = np_utils.to_categorical(Y_test)

#컨볼루션 신경망
model = Sequential()
model.add(Conv2D(32, kernel_size=(3,3), input_shape=(28, 28, 1), activation='relu'))
model.add(Conv2D(32, (3,3), activation='relu'))
model.add(Conv2D(64, (3,3), activation='relu'))
model.add(MaxPooling2D(pool_size=2))
model.add(Dropout(0.25))
model.add(Flatten())
model.add(Dense(512, activation='relu'))
model.add(Dropout(0.5))
model.add(Dense(128, activation='relu'))
model.add(Dense(10, activation='softmax'))

model.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])

#최적화
MODEL_DIR = './mode/'
if not os.path.exists(MODEL_DIR):
  os.mkdir(MODEL_DIR)

modelpath="./model/{epoch:02d}-{val_loss:.4f}.hdf5" 
checkpointer = ModelCheckpoint(filepath=modelpath, monitor='val_loss', verbose=1, save_best_only=True)
early_stoppoint_callback = EarlyStopping(monitor='val_loss', patience=10) 

#실행
history = model.fit(X_train, Y_train, validation_data=(X_test, Y_test), epochs=30, batch_size=200, verbose=0, callbacks=[early_stoppoint_callback,checkpointer])

#테스트 정확도
print("\n Test Accuracy: %.4f" % (model.evaluate(X_test, Y_test)[1]))

#테스트 오차
y_vloss = history.history['val_loss']

#학습셋 오차
y_loss =history.history['loss']


Epoch 00001: val_loss improved from inf to 0.29855, saving model to ./model/01-0.2986.hdf5

Epoch 00002: val_loss improved from 0.29855 to 0.24881, saving model to ./model/02-0.2488.hdf5

Epoch 00003: val_loss improved from 0.24881 to 0.22333, saving model to ./model/03-0.2233.hdf5

Epoch 00004: val_loss improved from 0.22333 to 0.21347, saving model to ./model/04-0.2135.hdf5

Epoch 00005: val_loss improved from 0.21347 to 0.20070, saving model to ./model/05-0.2007.hdf5

Epoch 00006: val_loss improved from 0.20070 to 0.19664, saving model to ./model/06-0.1966.hdf5

Epoch 00007: val_loss improved from 0.19664 to 0.18992, saving model to ./model/07-0.1899.hdf5

Epoch 00008: val_loss improved from 0.18992 to 0.18612, saving model to ./model/08-0.1861.hdf5

Epoch 00009: val_loss did not improve from 0.18612

Epoch 00010: val_loss did not improve from 0.18612

Epoch 00011: val_loss did not improve from 0.18612

Epoch 00012: val_loss did not improve from 0.18612

Epoch 00013: val_loss did not improve from 0.18612

Epoch 00014: val_loss did not improve from 0.18612

Epoch 00015: val_loss did not improve from 0.18612

Epoch 00016: val_loss did not improve from 0.18612

Epoch 00017: val_loss did not improve from 0.18612

Epoch 00018: val_loss did not improve from 0.18612
313/313 [==============================] - 8s 24ms/step - loss: 0.2465 - accuracy: 0.9342

 Test Accuracy: 0.9342